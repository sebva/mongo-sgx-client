/* mongoclient.edl - Top EDL file. */

enclave {
	from "ssl_wrappers.edl" import *;
	include "../trusted/my_enclave_types.h"

    untrusted {
    	void* ocall_malloc(size_t size);
		void ocall_free([user_check] void *ptr);
    	int ocall_access([in, string] const char *path, int amode);
    	int ocall_getaddrinfo([in, string] const char *node, [in, string] const char *service, [in] const struct addrinfo *hints, [user_check] struct addrinfo **res);
		void ocall_freeaddrinfo([user_check] struct addrinfo *res);
		int ocall_fcntl(int fildes, int cmd1, int cmd2); // Limited to 2 cmd instead of variadic
		int ocall_poll([in, out, count=nfds] struct pollfd *fds, nfds_t nfds, int timeout);
		int ocall_getsockopt(int socket, int level, int option_name, [user_check] void *option_value, [user_check] socklen_t *option_len);
		int ocall_setsockopt(int socket, int level, int option_name, [in, size=option_len] const void *option_value, socklen_t option_len);
		int ocall_accept(int socket, [user_check] struct sockaddr *address, [in, out] socklen_t *address_len);
		int ocall_close(int fildes);
		uint16_t ocall_ntohs(uint16_t netshort);
		int ocall_bind(int socket, [in, size=address_len] const struct sockaddr *address, socklen_t address_len);
		int ocall_shutdown(int socket, int how);
		int ocall_connect(int socket, [in, size=address_len] const struct sockaddr *address, socklen_t address_len);
		int ocall_listen(int socket, int backlog);
		int ocall_socket(int domain, int type, int protocol);
		ssize_t ocall_recv(int socket, [out, size=length] void *buffer, size_t length, int flags);
		ssize_t ocall_send(int socket, [in, size=length] const void *buffer, size_t length, int flags);
		ssize_t ocall_sendmsg(int socket, [in, size=message_len] const struct msghdr *message, size_t message_len, int flags);
		//struct servent *ocall_getservbyname(const char *name, const char *proto);
		struct hostent *ocall_gethostbyname([in, string] const char *name);
		int ocall_getnameinfo([in, size=addrlen] const struct sockaddr *addr, socklen_t addrlen, [in, out, size=hostlen] char *host, socklen_t hostlen, [in, out, size=servlen] char *serv, socklen_t servlen, int flags);
		//int ocall_getpeername(int socket, struct sockaddr *restrict address, socklen_t *address_len);
		//int ocall_ioctl(int fildes, int request, ...);
		//const char *ocall_inet_ntop(int af, const void *src, char *dst, socklen_t size);
		ssize_t ocall_read(int fildes, [out, size=nbyte] void *buf, size_t nbyte);
		//int ocall_open(const char *path, int oflag, ...);
		int ocall_gethostname([out, count=namelen] char *name, size_t namelen);
		//int getsockname(int socket, struct sockaddr *address, socklen_t *address_len);
		pid_t ocall_getpid(void);
    };


    trusted {
    	    public int ecall_mongoclient_sample();
    };
};
